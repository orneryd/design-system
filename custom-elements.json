{
  "version": "experimental",
  "tags": [
    {
      "name": "mds-accordion",
      "path": "./packages/accordion/src/mds-accordion.js",
      "description": "# mckesson-design-system accordion\nA styled accordion or expandable panel that allows for a header and content. the component will dynamically expand to the size of the contents.\n\n## Installation\n\n### npm\n```bash\nnpm i `@mcklabs/mds-accordion` --save\n```\n\n### yarn\n```bash\nyarn add `@mcklabs/mds-accordion`\n```\n\n### Rendered\n![](samples/accordion.png)\n\n### Usage\n\n```html\n<mds-accordion elevation=\"6\" state=\"open\">\n<div slot=\"accordion-header\">Default open</div>\n<div slot=\"accordion-content\">\n   Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut\n   labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco\n   laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in\n   voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat\n   cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n</div>\n</mwc-accordion>\n```\n\n### React Component\n\n```jsx\nimport `@mcklabs/mds-accordion`\n\nexport const accordion = () => (\n<mds-accordion\n   elevation={6}\n>\n   <div slot=\"accordion-header\">Default collapse</div>\n   <div slot=\"accordion-content\">\n     Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut\n     labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco\n     laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in\n     voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat\n     cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n   </div>\n</mds-accordion>\n)\n```\n\n### Set the following variables in your imported SCSS/CSS file or html `style` tag, before usage\n\n```css\n:root {\n--mdsAccordionIconColor: purple;\n--mdsAccordionIconColorHover: orange;\n}\n```\n\n### Rendered in the browser\n![](samples/accordion-custom.gif)",
      "attributes": [
        {
          "name": "elevation",
          "description": "Sets the elevation for the accordion's internal MdsPaper",
          "type": "String",
          "default": "\"3\""
        },
        {
          "name": "state",
          "description": "Sets the initial state and can be toggled to open or close it",
          "type": "String",
          "default": "\"collapse\""
        }
      ],
      "properties": [
        {
          "name": "elevation",
          "attribute": "elevation",
          "description": "Sets the elevation for the accordion's internal MdsPaper",
          "type": "String",
          "default": "\"3\""
        }
      ],
      "events": [
        {
          "name": "accordion-state",
          "description": "the current state of the accordion"
        }
      ],
      "cssProperties": [
        {
          "name": "--mdsAccordionIconColor",
          "description": "Overrides the icon color for the accordion indicator button."
        },
        {
          "name": "--mdsAccordionIconColorHover",
          "description": "Overrides the icon color on :hover for the accordion indicator button."
        }
      ]
    },
    {
      "name": "mds-banner",
      "path": "./packages/banner/src/mds-banner.js",
      "description": "# mckesson-design-system banner\nA styled banner header and content\n\n## Installation\n\n### npm\n```bash\nnpm i `@mcklabs/mds-banner` --save\n```\n\n### yarn\n```bash\nyarn add `@mcklabs/mds-banner`\n```\n\n### Rendered in the browser\n![](samples/banner.png)\n<br/>\n\n### Set the following variables in your imported SCSS/CSS file or html `style` tag, before usage\n```css\n:root {\n--mdsBannerMaxWidth: 1024px;\n--mdsBannerColor: purple;\n--mdsBannerBackgroundColor: rgba(255, 166, 0, 0.783);\n}\n```\n\n### Rendered in the browser\n![](samples/banner-custom.png)\n<br/>\n\n```css\n:root {\n--mdsBannerBackgroundColor: orange;\n--mdsBannerHeaderColor: darkgreen;\n--mdsBannerHeaderMaxWidth: 320px;\n--mdsBannerContentColor: white;\n--mdsBannerContentMaxWidth: 320px;\n}\n```\n\n### Rendered in the browser\n![](samples/banner-custom-2.png)\n<br/>",
      "slots": [
        {
          "name": "header",
          "description": "The header slot inside an h1 element"
        },
        {
          "name": "content",
          "description": "The content slot inside an h4 element"
        }
      ],
      "cssProperties": [
        {
          "name": "--mdsBannerColor",
          "description": "Overrides the text color for the banner."
        },
        {
          "name": "--mdsBannerBackgroundColor",
          "description": "Overrides the background color for the header."
        },
        {
          "name": "--mdsBannerMaxWidth",
          "description": "Overrides the maxwidth for the header and content."
        },
        {
          "name": "--mdsBannerHeaderColor",
          "description": "Overrides the text color for the header."
        },
        {
          "name": "--mdsBannerHeaderMaxWidth",
          "description": "Overrides the max-width for the header."
        },
        {
          "name": "--mdsBannerContentColor",
          "description": "Overrides the text color for the content."
        },
        {
          "name": "--mdsBannerContentMaxWidth",
          "description": "Overrides the max-width for the header."
        }
      ]
    },
    {
      "name": "mds-button",
      "path": "./packages/button/src/mds-button.js",
      "description": "# mckesson-design-system button\nA styled button\n\n## Installation\n\n### npm\n```bash\nnpm i `@mcklabs/mds-button` --save\n```\n\n### yarn\n```bash\nyarn add `@mcklabs/mds-button`\n```\n\n### HTML Usage\n```html\n<mds-button variant=\"primary\">Primary</mds-button>\n<mds-button variant=\"primary rounded\">Primary Rounded</mds-button>\n<mds-button variant=\"primary\" disabled>Primary Disabled</mds-button>\n<mds-button variant=\"secondary\">Secondary</mds-button>\n<mds-button variant=\"secondary rounded\" disabled=\"\">Secondary Rounded</mds-button>\n<mds-button variant=\"secondary\" disabled>Secondary Disabled</mds-button>\n<mds-button variant=\"outlined\">Outlined</mds-button>\n<mds-button variant=\"outlined rounded\">Outlined Rounded</mds-button>\n<mds-button variant=\"outlined\" disabled>Outlined Disabled</mds-button>\n```\n\n### React Component\n```jsx\nimport `@mcklabs/mds-button`\n\nexport const buttons = () => (\n<div>\n   <mds-button variant=\"primary\">Primary</mds-button>\n   <mds-button variant=\"primary rounded\">Primary Rounded</mds-button>\n   <mds-button variant=\"primary\" disabled>Primary Disabled</mds-button>\n   <mds-button variant=\"secondary\">Secondary</mds-button>\n   <mds-button variant=\"secondary rounded\" disabled=\"\">Secondary Rounded</mds-button>\n   <mds-button variant=\"secondary\" disabled>Secondary Disabled</mds-button>\n   <mds-button variant=\"outlined\">Outlined</mds-button>\n   <mds-button variant=\"outlined rounded\">Outlined Rounded</mds-button>\n   <mds-button variant=\"outlined\" disabled>Outlined Disabled</mds-button>\n</div>\n)\n```\n\n### HTML Usage\n```html\n<mds-button variant=\"primary\" href=\"http://kittenwar.com\">Rate Kittens</mds-button>\n```\n### Rendered in the browser\n\n![](samples/buttons.png)\n\n### Set the following variables in your imported SCSS/CSS file or html `style` tag, before usage\n\n```css\n:root {\n--mdsBannerMaxWidth: 1024px;\n--mdsBannerColor: purple;\n--mdsBannerBackgroundColor: rgba(255, 166, 0, 0.783);\n}\n```\n<br/>",
      "attributes": [
        {
          "name": "href",
          "description": "give the button an href and it will render an `anchor` tag with the appropriate href instead of a `button` tag",
          "type": "String"
        },
        {
          "name": "variant",
          "description": "variant of the button",
          "type": "String"
        },
        {
          "name": "disabled",
          "description": "sets the enabled or disabled state",
          "type": "String"
        }
      ],
      "properties": [
        {
          "name": "tag",
          "type": "\"a\" | \"button\""
        },
        {
          "name": "startTag",
          "type": "string"
        },
        {
          "name": "closeTag",
          "type": "string"
        },
        {
          "name": "isDisabled",
          "type": "boolean"
        },
        {
          "name": "buttonElement",
          "type": "Element | null"
        },
        {
          "name": "buttonStyle",
          "type": "string"
        },
        {
          "name": "urlTarget",
          "type": "string"
        }
      ],
      "cssProperties": [
        {
          "name": "--mdsButtonPrimaryColor",
          "description": "Overrides the primary color",
          "type": "String"
        },
        {
          "name": "--mdsButtonPrimaryColorHover",
          "description": "Overrides the primary color on hover",
          "type": "String"
        },
        {
          "name": "--mdsButtonSecondaryColor",
          "description": "Overrides the secondary color",
          "type": "String"
        },
        {
          "name": "--mdsButtonSecondaryColorHover",
          "description": "Overrides the secondary color on hover",
          "type": "String"
        },
        {
          "name": "--mdsButtonOulinedBackgroundColor",
          "description": "Overrides the outlined background color",
          "type": "String"
        },
        {
          "name": "--mdsButtonOulinedBackgroundColorHover",
          "description": "Overrides the outlined background color on hover",
          "type": "String"
        },
        {
          "name": "--mdsButtonOulinedBorder",
          "description": "Overrides the outlined border color",
          "type": "String"
        },
        {
          "name": "--mdsButtonOulinedBorderHover",
          "description": "Overrides the  outlined border color on hover",
          "type": "String"
        },
        {
          "name": "--mdsButtonOulinedColor",
          "description": "Overrides the outlined color",
          "type": "String"
        },
        {
          "name": "--mdsButtonOulinedColorHover",
          "description": "Overrides the outlined color on hover",
          "type": "String"
        }
      ]
    },
    {
      "name": "mds-checkbox",
      "path": "./packages/checkbox/src/mds-checkbox.js",
      "description": "# mckesson-design-system checkbox\nA styled checkbox by the mckesson design team.\n\n## Installation\n\n### npm\n```bash\nnpm i `@mcklabs/mds-checkbox` --save\n```\n\n### yarn\n```bash\nyarn add `@mcklabs/mds-checkbox`\n```\n\n### HTML Usage\n```html\n<div style={{ width: '360px', margin: '20px' }}>\n<mds-checkbox checked label=\"Some Label\" />\n</div>\n```\n\n### React Component\n```jsx\nimport `@mcklabs/mds-checkbox`\n\nexport const buttons = () => (\n<div style={{ width: '360px', margin: '20px' }}>\n   <mds-checkbox checked={\"true\"} label=\"Some Label\" />\n</div>\n)\n```\n\n### Rendered in the browser\n\n![](samples/checkbox.png)\n<br/>",
      "attributes": [
        {
          "name": "checked",
          "description": "the checked status",
          "type": "String"
        },
        {
          "name": "label",
          "description": "the checkbox label text",
          "type": "String"
        },
        {
          "name": "disabled",
          "description": "sets the enabled or disabled state",
          "type": "String"
        }
      ],
      "properties": [
        {
          "name": "value",
          "type": "\"\" | \"checked\""
        },
        {
          "name": "indicatorElement",
          "type": "Element | null"
        },
        {
          "name": "validationMessage",
          "type": "string"
        },
        {
          "name": "inputWrapper",
          "type": "Element | null"
        },
        {
          "name": "checked",
          "attribute": "checked",
          "description": "the checked status",
          "type": "String"
        }
      ],
      "cssProperties": [
        {
          "name": "--mdsCheckboxBorder",
          "description": "Overrides the border color",
          "type": "String"
        },
        {
          "name": "--mdsCheckboxColorChecked",
          "description": "Overrides the color of the checkbox",
          "type": "String"
        }
      ]
    },
    {
      "name": "mds-chip",
      "path": "./packages/chip/src/mds-chip.js",
      "description": "# mckesson-design-system chip\nA styled chip that functions similar a tag or chip in bootstrap or material ui.\n\n## Installation\n\n### npm\n```bash\nnpm i `@mcklabs/mds-chip` --save\n```\n\n### yarn\n```bash\nyarn add `@mcklabs/mds-chip`\n```",
      "attributes": [
        {
          "name": "value",
          "description": "the value for the chip",
          "type": "String"
        },
        {
          "name": "label",
          "description": "the label for the chip",
          "type": "String"
        }
      ],
      "events": [
        {
          "name": "closechip",
          "description": "emitted when the X is clicked."
        }
      ],
      "cssProperties": [
        {
          "name": "--mdsChipColor",
          "description": "Overrides the border color",
          "type": "String"
        },
        {
          "name": "--mdsChipBackgroundColor",
          "description": "Overrides the color of the checkbox",
          "type": "String"
        },
        {
          "name": "--mdsChipIconColor",
          "description": "Overrides the color of the checkbox",
          "type": "String"
        },
        {
          "name": "--mdsChipIconColorHover",
          "description": "Overrides the color of the checkbox",
          "type": "String"
        },
        {
          "name": "--mdsChipIconColorActive",
          "description": "Overrides the color of the checkbox",
          "type": "String"
        }
      ]
    },
    {
      "name": "mds-chip-bag",
      "path": "./packages/chip-bag/src/mds-chip-bag.js",
      "description": "# mckesson-design-system chip-bag\nA styled chip container that functions similar to a Chip Array\n\n## Installation\n\n### npm\n```bash\nnpm i @mcklabs/mds-chip-bag --save\n```\n\n### yarn\n```bash\nyarn add @mcklabs/mds-chip-bag\n```",
      "attributes": [
        {
          "name": "invalid"
        }
      ],
      "properties": [
        {
          "name": "inputElement",
          "type": "Element | null"
        },
        {
          "name": "delimiter",
          "type": "RegExp"
        },
        {
          "name": "allowDups",
          "type": "boolean"
        },
        {
          "name": "chipCloseTag",
          "type": "string"
        },
        {
          "name": "chipStartTag",
          "type": "string"
        },
        {
          "name": "chipTag",
          "type": "string"
        },
        {
          "name": "chips",
          "type": "never[]",
          "default": "[]"
        }
      ],
      "events": [
        {
          "name": "chipclick"
        },
        {
          "name": "chipsupdate"
        }
      ]
    },
    {
      "name": "mds-paper",
      "path": "./packages/paper/src/mds-paper.js",
      "description": "# mckesson-design-system paper\nA styled paper that you can set the elevation property for more drastic effects.\n\n## Installation\n\n### npm\n```bash\nnpm i `@mcklabs/mds-paper` --save\n```\n\n### yarn\n```bash\nyarn add `@mcklabs/mds-paper`\n```\n\n### HTML Usage\n```html\n<mds-paper elevation=\"6\">\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut\nlabore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco\nlaboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in\nvoluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat\ncupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n</mwc-paper>\n```\n\n### React Component\n\n```js\nimport `@mcklabs/mds-banner`\n\nexport const paper = () => (\n<mds-paper\n   elevation={6}\n>\n     Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut\n     labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco\n     laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in\n     voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat\n     cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n   </div>\n</mds-paper>\n)\n```\n\n### Rendered in the browser\n\n![](samples/paper.png)\n<br/>\n\n### Set the following variables in your imported SCSS/CSS file or html `style` tag, before usage\n\n```css\n:root {\n--mdsPaperColor: orange;\n--mdsPaperBackgroundColor: purple;\n--mdsPaperBoxShadowHOffsetColor: rgba(255, 0, 255, 0.2);\n--mdsPaperBoxShadowVOffsetColor: rgba(255, 0, 255, 0.14);\n--mdsPaperBoxShadowBlurColor: rgba(255, 0, 255, 0.12);\n}\n```\n\n### Rendered in the browser\n\n![](samples/paper-custom.png)\n<br/>",
      "attributes": [
        {
          "name": "elevation",
          "description": "Sets the elevation for the accordion's internal MdsPaper element",
          "type": "String",
          "default": "\"3\""
        }
      ],
      "properties": [
        {
          "name": "elevation",
          "attribute": "elevation",
          "description": "Sets the elevation for the accordion's internal MdsPaper element",
          "type": "String",
          "default": "\"3\""
        }
      ],
      "cssProperties": [
        {
          "name": "--mdsPaperBackgroundColor",
          "description": "Overrides the icon color for the accordion indicator button."
        },
        {
          "name": "--mdsPaperBoxShadowHOffsetColor",
          "description": "Overrides the icon color for the accordion indicator button."
        },
        {
          "name": "--mdsPaperBoxShadowVOffsetColor",
          "description": "Overrides the icon color for the accordion indicator button."
        },
        {
          "name": "--mdsPaperBoxShadowBlurColor",
          "description": "Overrides the icon color for the accordion indicator button."
        }
      ]
    },
    {
      "name": "mds-radio",
      "path": "./packages/radio/src/mds-radio.js",
      "description": "# mckesson-design-system checkbox\nA styled checkbox by the mckesson design team.\n\n## Installation\n\n### npm\n```bash\nnpm i `@mcklabs/mds-radio` --save\n```\n\n### yarn\n```bash\nyarn add `@mcklabs/mds-radio`\n```\n\n### HTML Usage\n```html\n<div style={{ width: '360px', margin: '20px' }}>\n<mds-radio type=\"radio\" name=\"fruit\" checked value=\"Strawberry\" />\n<mds-radio type=\"radio\" name=\"fruit\" value=\"Orange\" />\n<mds-radio type=\"radio\" name=\"fruit\" value=\"Lemon\" />\n</div>\n```\n\n### React Component\n```jsx\nimport `@mcklabs/mds-checkbox`\n\nexport const buttons = () => (\n<div style={{ width: '360px', margin: '20px' }}>\n   <mds-radio type=\"radio\" name=\"fruit\" checked value=\"Strawberry\" />\n   <mds-radio type=\"radio\" name=\"fruit\" value=\"Orange\" />\n   <mds-radio type=\"radio\" name=\"fruit\" value=\"Lemon\" />\n</div>\n)\n```\n\n### Rendered in the browser\n\n![](samples/radio.png)\n<br/>",
      "attributes": [
        {
          "name": "value",
          "description": "the checkbox value",
          "type": "String"
        },
        {
          "name": "checked",
          "description": "the checked status",
          "type": "String"
        },
        {
          "name": "label",
          "description": "the checkbox label text",
          "type": "String"
        },
        {
          "name": "name",
          "description": "the checkbox label text",
          "type": "String"
        },
        {
          "name": "disabled",
          "description": "sets the enabled or disabled state",
          "type": "String"
        }
      ],
      "properties": [
        {
          "name": "value",
          "attribute": "value",
          "description": "the checkbox value",
          "type": "String"
        },
        {
          "name": "validationMessage",
          "type": "string"
        },
        {
          "name": "indicatorElement",
          "type": "Element | null"
        },
        {
          "name": "checked",
          "attribute": "checked",
          "description": "the checked status",
          "type": "String"
        }
      ],
      "cssProperties": [
        {
          "name": "--mdsRadioBorder",
          "description": "Overrides the border color",
          "type": "String"
        },
        {
          "name": "--mdsRadioColorChecked",
          "description": "Overrides the color of the checked indicator",
          "type": "String"
        }
      ]
    }
  ]
}